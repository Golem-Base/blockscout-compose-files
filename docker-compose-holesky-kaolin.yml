services:
  proxy:
    image: nginxproxy/nginx-proxy:1.8
    ports:
      - 443:443
      - 80:80
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs:ro
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - ./proxy.conf:/etc/nginx/conf.d/custom-proxy.conf

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes_from:
      - proxy
    volumes:
      - certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro

  db-init:
    image: postgres:17
    volumes:
      - blockscout-db-data:/var/lib/postgresql/data
    entrypoint:
      - sh
      - -c
      - |
        chown -R 2000:2000 /var/lib/postgresql/data

  db:
    image: postgres:17
    user: 2000:2000
    shm_size: 256m
    restart: always
    container_name: "db"
    command: postgres -c 'max_connections=200' -c 'client_connection_check_interval=60000'
    environment:
      POSTGRES_DB: "blockscout"
      POSTGRES_USER: "blockscout"
      POSTGRES_PASSWORD: "ceWb1MeLBEeOIfk65gU8EjF8"
    volumes:
      - blockscout-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blockscout -d blockscout"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis-db:
    image: "redis:alpine"
    container_name: redis-db
    command: redis-server
    volumes:
      - redis-data:/data

  backend:
    image: golemnetwork/blockscout-optimism:master
    pull_policy: always
    restart: always
    stop_grace_period: 5m
    container_name: "backend"
    command: sh -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health/readiness"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    env_file:
      - ./envs/holesky.kaolin.backend.env
    environment:
      - VIRTUAL_HOST=api.kaolin.golem.neti-soft.dev
      - VIRTUAL_PORT=4000
      - LETSENCRYPT_HOST=api.kaolin.golem.neti-soft.dev
      - LETSENCRYPT_EMAIL=kacper.zuk@neti-soft.com
    volumes:
      - backend-logs:/app/logs/
      - backend-dets:/app/dets/
    depends_on:
      - db
      - redis-db
    links:
      - db:database
    profiles:
      - backend

  frontend:
    image: golemnetwork/blockscout-frontend:develop
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: "frontend"
    env_file:
      - ./envs/holesky.kaolin.frontend.env
    environment:
      - VIRTUAL_HOST=kaolin.golem.neti-soft.dev
      - LETSENCRYPT_HOST=kaolin.golem.neti-soft.dev
      - LETSENCRYPT_EMAIL=kacper.zuk@neti-soft.com
    profiles:
      - frontend

  golem-base-indexer:
    image: golemnetwork/blockscout-rs-neti:main
    restart: always
    container_name: "golem-base-indexer"
    env_file:
      - ./envs/golem-base-indexer.env
    environment:
      - VIRTUAL_HOST=golem-indexer.kaolin.golem.neti-soft.dev
      - VIRTUAL_PORT=8050
      - LETSENCRYPT_HOST=golem-indexer.kaolin.golem.neti-soft.dev
      - LETSENCRYPT_EMAIL=kacper.zuk@neti-soft.com
    volumes:
      - golem-base-indexer:/app/data/
    links:
      - db
    depends_on:
      - db
    profiles:
      - services

  op-init:
    image: alpine:latest
    command:
      - sh
      - -c
      - |
        set -e

        # Create config directory
        mkdir -p /config

        # Generate JWT secret if it doesn't exist
        if [ ! -f '/jwt/jwt' ]; then
          echo 'Generating JWT secret'
          mkdir -p /jwt
          # Generate a 32-byte random hex string for JWT secret
          apk add --no-cache openssl
          openssl rand -hex 32 > /jwt/jwt
          chmod 666 /jwt/jwt
          echo 'JWT secret generated successfully'
        else
          echo 'JWT secret already exists, skipping generation'
        fi
    volumes:
      - op_node_data:/op-node
      - jwt_shared:/jwt
  op-geth-init:
    image: golemnetwork/golembase-l3-op-geth:v1.101511.0-1.2-holesky-kaolin-7fe1c5ab
    depends_on:
      op-init:
        condition: service_completed_successfully
    entrypoint: []
    command:
      - /bin/sh
      - -c
      - |
        set -e
        if [ ! -f '/geth/geth' ]; then
          echo 'Initializing geth data directory with genesis block...'

          # Use genesis file from op-init
          if ! geth init --state.scheme=hash --datadir='/geth' '/genesis.json'; then
            echo 'ERROR: Failed to initialize geth with genesis block'
            exit 1
          fi
          echo 'Geth initialized successfully with genesis block'
        else
          echo 'Geth data directory already initialized, skipping initialization'
        fi
    volumes:
      - op_geth_data:/geth
  op-geth:
    image: golemnetwork/golembase-l3-op-geth:v1.101511.0-1.2-holesky-kaolin-7fe1c5ab
    restart: unless-stopped
    stop_grace_period: 5m
    depends_on:
      op-geth-init:
        condition: service_completed_successfully
    command:
      - --networkid=60138453025
      - --datadir=/geth
      - --http
      - --http.corsdomain=*
      - --http.vhosts=*
      - --http.addr=0.0.0.0
      - --http.port=8545
      - --http.api=admin,debug,eth,txpool,net,engine,web3,golembase,txpool
      - --ws
      - --ws.addr=0.0.0.0
      - --ws.port=8546
      - --ws.origins=*
      - --ws.api=admin,debug,eth,txpool,net,engine,web3,golembase,txpool
      - --syncmode=full
      - --gcmode=archive
      - --authrpc.vhosts=*
      - --authrpc.addr=0.0.0.0
      - --authrpc.port=8551
      - --authrpc.jwtsecret=/jwt/jwt
      - --usb=false
      - --state.scheme=hash
      - --nat=none
      - --bootnodes=enode://3780bf4665c66c1de9f213406465ef525f65bf61efa887993535791b5011704de32df6cfdf3e4e2cf51a4d92f863143c73c2723a20d654b256f31faa02436379@144.76.174.235:46012,enode://a208579338e24a279a989f052ba043966b147483f4374f1279f95f5b7099bcc0ee697b85e08026af04881e1bbaad24dd69b591b1fc7403bc157a5aec9692cf07@37.27.230.18:46014,enode://8192c8afc67264740d72cb134d4f3396faef2e2e63aa5dfb75f49d6b3bc4a0055abb69832048e91c437d7fa88e160d47ac2dd3b602256da2be1d1313ff9ae46e@78.46.85.197:46016,enode://19344c4a8f2ad6603cbb613ceeb781a785c9b6bbd6e5141bb1b74a0741c74ac1c072fcb4d7035cc9d7d9d9bfd616007e7d4483ba77e4c3a1d75d963dde16ae91@116.202.192.224:46018,enode://7a57de8972b22766232fdabef4d360d167e1a1e691cf20fc0d51dae61ea7e1f74179323090976668c80588f33b39aae7b41c6c40b209eb59a92e158375c16e6a@116.202.193.109:46020
      - --txpool.disable.non.golembase.transactions=true
    volumes:
      - op_geth_data:/geth
      - jwt_shared:/jwt
  op-node:
    image: golemnetwork/golembase-l3-op-node:v1.13.5-holesky-kaolin-66580529
    restart: unless-stopped
    stop_grace_period: 5m
    depends_on:
      op-init:
        condition: service_completed_successfully
      op-geth:
        condition: service_started
    command:
      - op-node
      - --l1=https://l2.holesky.golem-base.io/rpc
      - --l1.beacon.ignore=true
      - --l1.rpckind=standard
      - --l1.trustrpc
      - --l2=http://op-geth:8551
      - --l2.enginekind=geth
      - --l2.jwt-secret=/jwt/jwt
      - --rpc.addr=0.0.0.0
      - --rpc.port=9545
      - --p2p.nat=true
      - --p2p.ban.peers=false
      - --p2p.bootnodes=enr:-KG4QIs2mzT5I5k1hk8HX6lbRgoUUHwEclQyKo4jPJj6Rx-iRwqoJQSqum09KCetuCK2dTcK3BkjC_jHs1hbCMAqp-GGAZjM9Qn-gmlkgnY0gmlwhJBMruuHb3BzdGFja4eh8J-E4AEAiXNlY3AyNTZrMaECrYx6l9oj8RQGXPTvnjSxHLuWVRFnlp3j2Q5DWrE-dFeDdGNwgrO9g3VkcIKzvQ,enr:-KG4QH9ecR4xnMVwgvRfalkb2Tk-nkMLGHSx536-Y2NcKPuUNuj2DTNz2RcnOW1tr_G9Xm7fLykOyHZn76Fv2J6anGWGAZjM9R3YgmlkgnY0gmlwhCUb5hKHb3BzdGFja4eh8J-E4AEAiXNlY3AyNTZrMaECW2cg8g0nEfFbR68uUJiFdhkEhD0z3NCC1Jnwp330Xx6DdGNwgrO_g3VkcIKzvw,enr:-KG4QEUmVyBS-56g14YJPmFcpLZBWYUjIQ8DIJE319y4NC4obE_wmjI5Kzb1d8BjGI1iMnOdCLrpjCOyTVZoX6vHGVWGAZjM9P5-gmlkgnY0gmlwhE4uVcWHb3BzdGFja4eh8J-E4AEAiXNlY3AyNTZrMaECgvmbzkyGwL2wB6k-3ae3QFBIabFMNht-foFXfTGtTQmDdGNwgrPBg3VkcIKzwQ,enr:-KG4QCxTUI4NO_og7j8_J4V9H8MC6zllj1QJsHOefooBVvG8BRe6rKlrZf__S6ChG3iFQ79-1WyXcrfp5m9VvSG3Z5GGAZjM9QXqgmlkgnY0gmlwhHTKwOCHb3BzdGFja4eh8J-E4AEAiXNlY3AyNTZrMaEDnLLmNzNDYzM2kmsXvdQZQ3mIDhaZSBKkx2U-DtfhCaeDdGNwgrPDg3VkcIKzww,enr:-KG4QOCMYO1mS3_1wJfAi4OpF5I7zExdclnNDB-I-ByafuczSlSGXN7k6fWLWD1_Z8l2LbT3avbCsNO-R9Sd_sFKbCSGAZjM9Qm1gmlkgnY0gmlwhHTKwW2Hb3BzdGFja4eh8J-E4AEAiXNlY3AyNTZrMaECk4ZmdPFnnqlzVDqbTo7lGPGEfoAqScIDcWHpgUCF6BeDdGNwgrPFg3VkcIKzxQ
      - --p2p.listen.tcp=9222
      - --p2p.listen.udp=9222
      - --metrics.enabled
      - --metrics.addr=0.0.0.0
      - --metrics.port=7300
      - --syncmode=execution-layer
      - --rollup.config=/rollup.json
      - --log.level=info
    volumes:
      - jwt_shared:/jwt
      - op_node_data:/op-node


  stats-db-init:
    image: postgres:17
    volumes:
      - stats-db-data:/var/lib/postgresql/data
    entrypoint:
      - sh
      - -c
      - |
        chown -R 2000:2000 /var/lib/postgresql/data

  stats-db:
    image: postgres:17
    user: 2000:2000
    shm_size: 256m
    restart: always
    container_name: 'stats-db'
    command: postgres -c 'max_connections=200'
    environment:
        POSTGRES_DB: 'stats'
        POSTGRES_USER: 'stats'
    volumes:
      - stats-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stats -d stats"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  stats:
    image: ghcr.io/blockscout/stats:latest
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'stats'
    environment:
      - STATS__CREATE_DATABASE=true
      - STATS__RUN_MIGRATIONS=true
      - STATS__BLOCKSCOUT_API_URL=https://api.kaolin.golem.neti-soft.dev
      - STATS__SERVER__HTTP__CORS__ENABLED=true
      - STATS__SERVER__HTTP__CORS__ALLOWED_ORIGIN=*
      - VIRTUAL_HOST=stats.kaolin.golem.neti-soft.dev
      - VIRTUAL_PORT=8050
      - LETSENCRYPT_HOST=stats.kaolin.golem.neti-soft.dev
      - LETSENCRYPT_EMAIL=kacper.zuk@neti-soft.com

volumes:
  backend-dets:
  backend-logs:
  blockscout-db-data:
  golem-base-indexer:
  redis-data:
  op_geth_data:
  op_node_data:
  jwt_shared:
  certs:
  stats-db-data:
